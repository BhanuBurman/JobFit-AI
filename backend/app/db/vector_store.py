import os
from typing import Optional, List
from uuid import uuid4
from langchain_community.vectorstores import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter
from app.external import embeddings
from app.core.config import settings

VECTOR_DB_ROOT_PATH = os.path.join(settings.BACKEND_ROOT, "vector_db")

os.makedirs(VECTOR_DB_ROOT_PATH, exist_ok=True)

def build_chroma_from_text(resume_text: str, collection_name: Optional[str]) -> Chroma:
    """Create an in-memory Chroma vector store from a resume text.

    Args:
        resume_text: The raw resume text to index.
        collection_name: Optional collection name; autogenerated if not provided.

    Returns:
        A Chroma vector store instance with embedded chunks of the provided text.
    """

    splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=100)
    chunks: List[str] = splitter.split_text(resume_text)

    persist_directory = os.path.join(VECTOR_DB_ROOT_PATH, collection_name)
    vector_db = Chroma(
        collection_name=collection_name, 
        embedding_function=embeddings,
        persist_directory=str(persist_directory)
    )

    if chunks:
        doc_id = uuid4().hex
        chunk_ids = [f"{doc_id}_chunk_{i}" for i in range(len(chunks))]
        vector_db.add_texts(texts=chunks, ids=chunk_ids)
        vector_db.persist()

    return vector_db


def get_vector_db(collection_name: str) -> Optional[Chroma]:
    """Get a vector database by collection name."""
    persist_directory = os.path.join(VECTOR_DB_ROOT_PATH, collection_name)
    
    if not persist_directory.exists():
        return None
        
    try:
        return Chroma(
            collection_name=collection_name, 
            embedding_function=embeddings, 
            persist_directory=str(persist_directory)
        )
    except Exception as e:
        print(f"Error loading vector DB {collection_name}: {e}")
        return None

def get_mmr_retriever(vector_db: Chroma, k: int = 2, lambda_mult: float = 0.5):
    """Return an MMR retriever for the given vector DB."""
    return vector_db.as_retriever(
        search_type="mmr",
        search_kwargs={"k": k, "lambda_mult": lambda_mult},
    )